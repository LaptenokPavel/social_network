{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogsItem/DialogItems.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItems","props","className","s","dialog","avatar","src","alt","to","id","name","Message","message","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredField","maxLength","minLength","Dialogs","dialogsDataElement","valueDialogs","map","d","messagesDataElement","valueMessages","m","dialogs","dialogs_item","messages","textarea","values","addMessage","newMessageBody","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","dialogsPage","messagesData","dispatch","addPostActionCreator","Component","restProps"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,SAAW,4B,oGCSjR,SAASC,EAAYC,GACxB,OACI,sBAAKC,UAAWC,IAAEC,OAAlB,UACI,8BACI,qBAAKF,UAAWC,IAAEE,OACbC,IAAI,sGACJC,IAAI,OAEb,8BACI,eAAC,IAAD,CAASC,GAAI,YAAcP,EAAMQ,GAAjC,UAAsCR,EAAMS,KAA5C,YCTT,SAASC,EAAQV,GAGpB,OACQ,qBAAKC,UAAWC,IAAES,QAAlB,SAA4BX,EAAMW,U,+CCkC9C,IAeMC,EAAsBC,YAA8B,CAACC,KAAM,wBAArCD,EAfL,SAACb,GACpB,OACI,uBAAMe,SAAUf,EAAMgB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,SAAU,CAACC,IAAeC,IAAWC,KACrCd,KAAM,qBAEjB,8BACI,yDAQDe,EA3Cf,SAAiBxB,GACb,IAAIyB,EAAsBzB,EAAM0B,aAAcC,KAAI,SAACC,GAAD,OAAQ,cAAC7B,EAAD,CAAwBU,KAAMmB,EAAEnB,KAAMD,GAAIoB,EAAEpB,IAA1BoB,EAAEpB,OAC1EqB,EAAuB7B,EAAM8B,cAAeH,KAAI,SAACI,GAAD,OAAQ,cAACrB,EAAD,CAAoBC,QAASoB,EAAEpB,QAASH,GAAIuB,EAAEvB,IAAhCuB,EAAEvB,OAO5E,OACI,sBAAKP,UAAWC,IAAE8B,QAAlB,UACI,qBAAK/B,UAAWC,IAAE+B,aAAlB,SACKR,IAEL,qBAAKxB,UAAWC,IAAEgC,SAAlB,SACKL,IAEL,qBAAK5B,UAAWC,IAAEiC,SAAlB,SACI,cAACvB,EAAD,CAAqBG,SAbX,SAACqB,GACnBpC,EAAMqC,WAAWD,EAAOE,yB,6BClB5BC,EAA6B,SAACC,GAC9B,MAAO,CAACC,OAAQD,EAAME,KAAKD,SC2BhBE,sBACXC,aAjBkB,SAACJ,GAEnB,MAAO,CACHd,aAAcc,EAAMK,YAAYb,QAChCF,cAAeU,EAAMK,YAAYC,iBAIhB,SAACC,GACtB,MAAO,CACHV,WAAY,SAACC,GACTS,EAASC,YAAqBV,UDnBnC,SAA8BW,GAcrC,OAFyCL,YAAQL,EAARK,EAVrC,SAA2B5C,GAA4B,IAE9CyC,EAAwBzC,EAAxByC,OAAWS,EAFkC,YAErBlD,EAFqB,YAIlD,OAAKyC,EAGE,cAACQ,EAAD,eAAeC,IAFV,cAAC,IAAD,CAAU3C,GAAI,gBCiBnBoC,CACqDnB","file":"static/js/3.1a741f46.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2mYRe\",\"dialogs_item\":\"Dialogs_dialogs_item__3Ti0E\",\"dialog\":\"Dialogs_dialog__2wMmE\",\"active\":\"Dialogs_active__3xRHh\",\"avatar\":\"Dialogs_avatar__3Xvbs\",\"messages\":\"Dialogs_messages__2PwVI\",\"message\":\"Dialogs_message__CH5S0\",\"textarea\":\"Dialogs_textarea__q_jEi\"};","import s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\ntype DialogsType = {\r\n    id: number\r\n    name: string\r\n\r\n};\r\n\r\nexport function DialogItems(props: DialogsType) {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <div>\r\n                <img className={s.avatar}\r\n                     src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT97y0vOoHF6QOVvgXHfJQUXd6YJnwl0TNDAQ&usqp=CAU\"\r\n                     alt=\"\"/>\r\n            </div>\r\n            <div>\r\n                <NavLink to={'/dialogs/' + props.id}>{props.name} </NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n};","import s from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\n\r\ntype MessagesDataType = {\r\n    id: number\r\n    message: string\r\n\r\n};\r\n\r\n\r\nexport function Message(props: MessagesDataType){\r\n\r\n\r\n    return (\r\n            <div className={s.message}>{props.message}</div>\r\n    )\r\n};","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItems} from \"./DialogsItem/DialogItems\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsType, MessagesDataType} from \"../../redux/dialogs-reducer\";\r\nimport {Field,  InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLenghtCreator, minLenghtCreator, requiredField} from \"../../utils/validators/validators\";\r\nimport {maxLength, minLength} from \"../Profile/MyPosts/MyPosts\";\r\n\r\n\r\nexport type DialogsProps = {\r\n    valueDialogs: Array<DialogsType>\r\n    valueMessages: Array<MessagesDataType>\r\n    newMessage: string\r\n    addMessage: (newMessageBody: string) => void\r\n  };\r\n\r\ntype AddMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nfunction Dialogs(props: DialogsProps) {\r\n    let dialogsDataElement = (props.valueDialogs).map((d) => (<DialogItems key={d.id} name={d.name} id={d.id}/>));\r\n    let messagesDataElement = (props.valueMessages).map((m) => (<Message key={m.id} message={m.message} id={m.id}/>));\r\n\r\n\r\n    const addNewMessage = (values: AddMessageFormType) => {\r\n        props.addMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogs_item}>\r\n                {dialogsDataElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesDataElement}\r\n            </div>\r\n            <div className={s.textarea}>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\nconst AddMessageForm = (props:InjectedFormProps<AddMessageFormType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[requiredField, maxLength, minLength]}\r\n                       name={'newMessageBody'}/>\r\n            </div>\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs;\r\n\r\n\r\n","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype mapStateIsAuthType = {\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state:AppStateType):mapStateIsAuthType => {\r\n    return {isAuth: state.auth.isAuth}\r\n}\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>){\r\n\r\n    function RedirectComponent(props: mapStateIsAuthType) {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) {\r\n            return (<Redirect to={'/login'}/>)\r\n        }\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\nreturn ConnectedAuthRedirectComponent\r\n\r\n}","import React from 'react';\r\nimport {\r\n    addPostActionCreator, DialogsType, MessagesDataType\r\n} from \"../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    valueDialogs: DialogsType[]\r\n    valueMessages: MessagesDataType[]\r\n\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (newMessageBody: string) => void\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType):\r\n    MapStateToPropsType => {\r\n    return {\r\n        valueDialogs: state.dialogsPage.dialogs,\r\n        valueMessages: state.dialogsPage.messagesData,\r\n            }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addMessage: (newMessageBody: string) => {\r\n            dispatch(addPostActionCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs)\r\n\r\n\r\n"],"sourceRoot":""}